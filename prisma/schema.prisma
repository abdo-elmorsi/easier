generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user_name  String
  email      String   @unique
  password   String
  role       String   @default("user")
  img        String?
  phone      String?
  created_at DateTime @default(now()) @db.Date
  updated_at DateTime @updatedAt @db.Date

  towers  Tower[] // A user can manage multiple towers
  userLog UserLog[]
}

model UserLog {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  action     String
  status     Boolean
  details    String?
  created_at DateTime @default(now()) @db.Date
  user_id    String?  @db.ObjectId
  user       User?    @relation(fields: [user_id], references: [id])
}

model Tower {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String   @unique
  address       String
  num_of_floors Int
  created_at    DateTime @default(now()) @db.Date
  updated_at    DateTime @updatedAt @db.Date

  user_id           String              @db.ObjectId
  user              User                @relation(fields: [user_id], references: [id])
  flats             Flat[]
  EstimatedExpenses EstimatedExpenses[]
  OpeningBalance    OpeningBalance[]
  Settlement        Settlement[]
  ChatMessage       ChatMessage[]
}

model Flat {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  number         String
  floor          Int
  password       String?
  phone          String?
  email          String?  @unique
  user_name      String?
  electricity    Boolean  @default(false)
  water          Boolean  @default(false)
  waste          Boolean  @default(false)
  guard          Boolean  @default(false)
  elevator       Boolean  @default(false)
  others         Boolean  @default(false)
  pay_percentage Int      @default(100)
  created_at     DateTime @default(now()) @db.Date
  updated_at     DateTime @updatedAt @db.Date

  tower_id    String        @db.ObjectId
  tower       Tower         @relation(fields: [tower_id], references: [id])
  Settlement  Settlement[]
  ChatMessage ChatMessage[]
}

model OpeningBalance {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  balance    Int      @default(0)
  notes      String?
  created_at DateTime @default(now()) @db.Date
  updated_at DateTime @updatedAt @db.Date

  tower_id String @db.ObjectId
  tower    Tower  @relation(fields: [tower_id], references: [id])
}

model EstimatedExpenses {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  electricity Int      @default(0)
  water       Int      @default(0)
  waste       Int      @default(0)
  guard       Int      @default(0)
  elevator    Int      @default(0)
  others      Int      @default(0)
  notes       String?
  attachments String[]
  created_at  DateTime @default(now()) @db.Date
  updated_at  DateTime @updatedAt @db.Date

  tower_id String @db.ObjectId
  tower    Tower  @relation(fields: [tower_id], references: [id])
}

model Settlement {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  pay_percentage Int     @default(0)
  electricity    Boolean @default(false)
  water          Boolean @default(false)
  waste          Boolean @default(false)
  guard          Boolean @default(false)
  elevator       Boolean @default(false)
  others         Boolean @default(false)

  payed_amount Int      @default(0)
  notes        String?
  created_at   DateTime @default(now()) @db.Date
  updated_at   DateTime @updatedAt @db.Date

  tower_id String @db.ObjectId
  tower    Tower  @relation(fields: [tower_id], references: [id])
  flat_id  String @db.ObjectId
  flat     Flat   @relation(fields: [flat_id], references: [id])
}

model ChatMessage {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  created_at DateTime @default(now()) @db.Date
  tower_id   String   @db.ObjectId
  tower      Tower    @relation(fields: [tower_id], references: [id])
  flat_id    String?  @db.ObjectId
  flat       Flat?    @relation(fields: [flat_id], references: [id])
}
